#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <4 5 3>;
            layers = <3>;
        };

        bootloader_right {
            bindings = <&bootloader>;
            key-positions = <6 7 8>;
            layers = <3>;
        };

        alt_tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <50 54>;
            layers = <0>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&gresc            &kp N1         &kp N2          &kp N3              &kp N4     &kp N5    &kp N6  &kp N7              &kp N8         &kp N9   &kp N0             &kp MINUS
&kp TAB           &kp Q          &kp W           &u_lt 7 E           &kp R      &kp T     &kp Y   &kp U               &u_lt 6 I      &kp O    &kp P              &kp LEFT_BRACKET
&kp LSHIFT        &u_lt 8 A      &kp S           &kp D               &kp F      &kp G     &kp H   &kp J               &kp K          &kp L    &u_lt 9 SEMICOLON  &u_mt LEFT_SHIFT APOS
&kp LEFT_CONTROL  &kp Z          &kp X           &u_lt 6 C           &kp V      &kp B     &kp N   &kp M               &u_lt 6 COMMA  &kp DOT  &kp SLASH          &u_mt LEFT_CONTROL BACKSLASH
                  &kp BACKSPACE  &kp LEFT_SHIFT  &u_mt LEFT_ALT TAB  &kp SPACE  &mo 2     &mo 1   &u_mt LEFT_ALT TAB  &kp ENTER
            >;
        };

        NAV {
            bindings = <
&kp LEFT_GUI  &trans         &trans           &trans          &trans           &trans           &trans             &trans                &trans                 &trans  &trans  &trans
&trans        &kp LS(LC(Q))  &kp HOME         &kp UP_ARROW    &kp END          &kp PAGE_UP      &kp GRAVE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans
&trans        &trans         &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN    &kp DOUBLE_QUOTES  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans  &trans  &trans
&trans        &kp LS(LC(Z))  &trans           &kp LS(LC(C))   &kp LS(LC(V))    &trans           &kp APOS           &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans  &mo 3
              &kp DELETE     &kp LC(LS(TAB))  &kp LC(TAB)     &kp LA(TAB)      &kp LEFT_GUI     &trans             &trans                &trans
            >;
        };

        NUMPAD {
            bindings = <
&trans  &trans         &trans        &trans     &trans     &trans    &trans         &kp PLUS  &kp KP_MINUS  &kp ASTERISK  &kp KP_DIVIDE  &trans
&trans  &trans         &trans        &trans     &trans     &trans    &trans         &kp N7    &kp N8        &kp N9        &kp KP_EQUAL   &trans
&trans  &kp KP_DIVIDE  &kp ASTERISK  &kp MINUS  &kp PLUS   &trans    &trans         &kp N4    &kp N5        &kp NUMBER_6  &kp N0         &trans
&mo 4   &kp LC(Z)      &kp LC(X)     &kp LC(C)  &kp LC(V)  &trans    &trans         &kp N1    &kp N2        &kp N3        &kp KP_DOT     &trans
        &trans         &trans        &trans     &trans     &trans    &kp SEMICOLON  &kp DLLR  &kp KP_EQUAL
            >;
        };

        FUN {
            bindings = <
&trans  &trans           &trans  &trans   &trans   &trans                     &trans  &trans          &trans            &trans        &trans        &trans
&trans  &kp SCROLLLOCK   &kp F1  &kp F2   &kp F3   &kp F4                     &trans  &trans          &trans            &trans        &trans        &trans
&trans  &trans           &kp F5  &kp F6   &kp F7   &kp F8                     &trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &kp PAUSE_BREAK  &kp F9  &kp F10  &kp F11  &kp F12                    &trans  &trans          &trans            &trans        &trans        &trans
        &trans           &trans  &trans   &trans   &kp LS(LC(PRINTSCREEN))    &trans  &trans          &trans
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans  &trans  &trans         &trans  &trans    &trans           &trans            &trans             &trans           &trans        &trans
&trans  &trans  &trans  &trans         &trans  &trans    &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &trans  &trans  &kp LS(MINUS)  &trans  &trans    &out OUT_TOG     &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans  &trans  &trans         &trans  &trans    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_BRI    &rgb_ug RGB_BRD  &trans        &trans
        &trans  &trans  &trans         &trans  &trans    &trans           &trans            &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans    &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans     &trans     &trans  &trans
        &trans  &trans     &trans     &trans     &trans    &trans  &trans     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        SNIPER {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        mouse_left {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans
            >;
        };

        mouse_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans     &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans
            >;
        };
    };
};

